//Recursive -> Calling a function within a function
//Fibonacci **** a common interview question
//1, 1, 2, 3, 5, 8, 13, 21, 34 -----> 9th = 34

//To create an array of N fibonacci numbers
//We must first create an array with one currentValue in it
//the number is 1

function fibonacci(n) {
  //<------When n = 3
  const fibSequence = [1];
  //We create two variables
  //one to hold the current number
  //we are working with and one to
  //hold the previous number

  let currentValue = 1;
  let previousValue = 0;

  if (n === 1) {
    return fibSequence;
  }

  //If we want more than the first number
  //we create an iteration counter variables
  //to keep track of the number we've added to our
  //array, we set the iterator counter to
  //n - 1

  let iterationsCounter = n - 1;

  while (iterationsCounter) {
    //Round2    currentValue =2, previousValue = 1
    //Round1    currentValue =1, previousValue = 0
    currentValue += previousValue;

    //Round2           previousValue = 1        <---  currentValue =2, previousValue = 1
    //Round1           previousValue = 1        <---  currentValue =1, previousValue = 0
    previousValue = currentValue - previousValue;

    //[1,1,2]
    //[1] -----> [1,1]
    fibSequence.push(currentValue);

    iterationsCounter -= 1;
  }
  return fibSequence;
}

function fib(n) {
  let a = 1;
  let b = 1;
  for (let i = 3; i <= n; i++) {
    //c = 3
    //c = 2;
    let c = a + b;

    //a =2
    //a = 1
    a = b;

    //b = 3
    //b = 2
    b = c;
  }
  return b;
}

//Complex way of doing it

function fib(position) {
  const sqrt5 = Math.sqrt(5);
  const phi = (1 + sqrt5) / 2;
  return Math.floor(phi ** position / sqrt5 + 0.5);
}
